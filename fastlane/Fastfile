APP_NAME = ENV.fetch("APP_NAME", "EnergylinkConnect2-dev")

platform :android do
    lane :build do
        cordova(
            platform: "android",
            release: ENV.fetch("CORDOVA_RELEASE", true),
            keystore_path: ENV.fetch("KEYSTORE_PATH", "./upload-keystore.jks"),
            keystore_password: ENV.fetch("KEYSTORE_PASSWORD", "my-password-123"),
            keystore_alias: ENV.fetch("KEYSTORE_ALIAS", "key0")
        )
    end

    lane :release do
        upload_to_play_store(
            apk: ENV.fetch("CORDOVA_ANDROID_RELEASE_BUILD_PATH", "./platforms/android/app/build/outputs/apk/release/app-release.apk"),
            json_key: ENV.fetch("PLAY_STORE_API_CRED", "./google-api.json"),
            package_name: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
            release_status: "completed",
            track: ENV.fetch("RELEASE_TRACK", "beta")
        )
    end
end

platform :ios do
    lane :build do
        # The keychain will be used only during the application building process.
        # We need a keychain for storing a certificate and private key. It
        # won't be copied to final application
        create_keychain(
            name: ENV.fetch("KEYCHAIN_NAME", "ci"),
            password: ENV.fetch("KEYCHAIN_PASSWORD", "123"),
            unlock: true
        )
        sync_code_signing(readonly: true)
        cordova(
            platform: "ios",
            release: ENV.fetch("CORDOVA_RELEASE", true)
        )
    end

    lane :release do
        app_store_connect_api_key(
            key_id: ENV.fetch("IOS_KEY_ID"),
            issuer_id: ENV.fetch("IOS_ISSUER_ID"),
            key: ENV.fetch("IOS_KEY")
        )

        upload_to_testflight(
            ipa: ENV.fetch("CORDOVA_IOS_RELEASE_BUILD_PATH", "./platforms/ios/build/device/#{APP_NAME}.ipa"),
            skip_submission: true,
            skip_waiting_for_build_processing: true
        )
    end
end
