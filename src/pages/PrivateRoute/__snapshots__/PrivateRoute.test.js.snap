// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Private Route redirects if not logged in 1`] = `
Object {
  "component": <BrowserRouter
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "REPLACE",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/login",
            "search": "",
            "state": Object {
              "from": "/",
            },
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Provider
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <PrivateRoute
          location={
            Object {
              "pathname": "/",
            }
          }
        >
          <Route
            component={[Function]}
            location={
              Object {
                "pathname": "/",
              }
            }
          >
            <component
              history={
                Object {
                  "action": "REPLACE",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/login",
                    "search": "",
                    "state": Object {
                      "from": "/",
                    },
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "pathname": "/",
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Redirect
                to={
                  Object {
                    "pathname": "/login",
                    "state": Object {
                      "from": "/",
                    },
                  }
                }
              >
                <Lifecycle
                  onMount={[Function]}
                  onUpdate={[Function]}
                  to={
                    Object {
                      "pathname": "/login",
                      "state": Object {
                        "from": "/",
                      },
                    }
                  }
                />
              </Redirect>
            </component>
          </Route>
        </PrivateRoute>
      </Provider>
    </Router>
  </BrowserRouter>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Private Route renders the provided component in a route if we are logged in 1`] = `
Object {
  "component": <BrowserRouter
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/login",
            "search": "",
            "state": Object {
              "from": "/",
            },
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Provider
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <PrivateRoute
          component={[Function]}
          isLoggedIn={true}
          location={
            Object {
              "pathname": "/",
            }
          }
        >
          <Route
            component={[Function]}
            location={
              Object {
                "pathname": "/",
              }
            }
          >
            <component
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/login",
                    "search": "",
                    "state": Object {
                      "from": "/",
                    },
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "pathname": "/",
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <myComponent
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/login",
                      "search": "",
                      "state": Object {
                        "from": "/",
                      },
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "pathname": "/",
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <div>
                  Example component
                </div>
              </myComponent>
            </component>
          </Route>
        </PrivateRoute>
      </Provider>
    </Router>
  </BrowserRouter>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;
