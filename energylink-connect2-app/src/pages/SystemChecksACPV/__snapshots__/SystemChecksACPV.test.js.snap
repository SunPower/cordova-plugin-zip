// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemChecksACPV component render correctly 1`] = `
<BrowserRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemChecksACPV>
        <main
          className="page-height system-checks pl-10 pr-10"
        >
          <FeatureFeedbackModal
            featureFlagName="ct-checks"
            open={false}
            placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
            title="CT_CHECKS_FEEDBACK_TITLE"
          >
            <SwipeableSheet
              onChange={[Function]}
              open={false}
              style={
                Object {
                  "zIndex": "9999",
                }
              }
            >
              <SwipeableBottomSheet
                defaultOpen={false}
                fullScreen={false}
                marginTop={0}
                onChange={[Function]}
                open={false}
                overflowHeight={0}
                overlay={true}
                scrollTopAtClose={true}
                shadowTip={true}
                style={
                  Object {
                    "zIndex": "9999",
                  }
                }
                swipeableViewsProps={
                  Object {
                    "className": "swipeable",
                  }
                }
                topShadow={true}
              >
                <div
                  style={
                    Object {
                      "bottom": 0,
                      "height": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "zIndex": "9999",
                    }
                  }
                >
                  <HeightUpdater
                    height={768}
                    onHeightChange={[Function]}
                  />
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "backgroundColor": "black",
                        "height": 768,
                        "left": 0,
                        "opacity": 0,
                        "pointerEvents": "none",
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                        "transition": "opacity 450ms",
                      }
                    }
                  />
                  <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="y"
                    className="swipeable"
                    containerStyle={
                      Object {
                        "boxSizing": "border-box",
                      }
                    }
                    disableLazyLoading={false}
                    disabled={false}
                    enableMouseEvents={true}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    onTransitionEnd={[Function]}
                    resistance={false}
                    slideStyle={
                      Object {
                        "boxSizing": "border-box",
                        "marginBottom": -0,
                        "overflow": "visible",
                      }
                    }
                    springConfig={
                      Object {
                        "delay": "0s",
                        "duration": "0.35s",
                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                      }
                    }
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                    threshold={5}
                  >
                    <div
                      className="swipeable"
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onMouseUp={[Function]}
                      onScroll={[Function]}
                      onTouchEnd={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "boxSizing": "border-box",
                          "overflowY": "initial",
                        }
                      }
                    >
                      <div
                        className="react-swipeable-view-container"
                        style={
                          Object {
                            "WebkitFlexDirection": "column",
                            "WebkitTransition": "all 0s ease 0s",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": null,
                            "transition": "all 0s ease 0s",
                            "willChange": "transform",
                          }
                        }
                      >
                        <div
                          aria-hidden={false}
                          data-swipeable="true"
                          key=".0"
                          style={
                            Object {
                              "WebkitFlexShrink": 0,
                              "boxSizing": "border-box",
                              "flexShrink": 0,
                              "marginBottom": -0,
                              "overflow": "visible",
                              "width": "100%",
                            }
                          }
                        >
                          <div
                            className="ReactSwipeableBottomSheet--closed"
                            style={
                              Object {
                                "backgroundColor": "white",
                                "height": "initial",
                                "maxHeight": 768,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <div
                              className="feedback-modal has-text-centered mt-10 mb-20"
                            >
                              <form
                                className="mt-20 pt-20"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="has-text-centered has-text-white has-text-weight-bold mb-5"
                                >
                                  CT_CHECKS_FEEDBACK_TITLE
                                </div>
                                <Rating
                                  onClick={[Function]}
                                  rating={1}
                                >
                                  <div
                                    className="column raitings"
                                  >
                                    <ForwardRef(SvgStar)
                                      className="active"
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className="active"
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                  </div>
                                </Rating>
                                <TextArea
                                  input={
                                    Object {
                                      "name": "comment",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": "",
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                  placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                >
                                  <div
                                    className="field"
                                  >
                                    <p
                                      className="control"
                                    >
                                      <textarea
                                        autoComplete="off"
                                        className="input textarea"
                                        disabled={false}
                                        name="comment"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                        value=""
                                      />
                                    </p>
                                  </div>
                                </TextArea>
                                <div
                                  className="is-flex file level space-around pt-0 mt-20"
                                >
                                  <button
                                    className="button is-uppercase is-primary"
                                    type="submit"
                                  >
                                    SUBMIT
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </ReactSwipableView>
                </div>
              </SwipeableBottomSheet>
            </SwipeableSheet>
          </FeatureFeedbackModal>
          <header
            className="is-clearfix has-text"
          >
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-left is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-chevron-left has-text-primary is-size-5 mr-5 mt-5"
              />
              SYSTEM_CHECKS
            </button>
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-right is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-update left has-text-primary is-size-5 mr-5 mt-5"
              />
              RUN_AGAIN
            </button>
          </header>
          <section
            className="mt-20"
          >
            <StatusBox
              indicator="0%"
              text="Not_running"
              title="PRODUCTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    PRODUCTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Not_running
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  0%
                </article>
              </section>
            </StatusBox>
            <StatusBox
              indicator="0%"
              text="Not_running"
              title="CONSUMPTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    CONSUMPTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Not_running
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  0%
                </article>
              </section>
            </StatusBox>
          </section>
        </main>
      </SystemChecksACPV>
    </Provider>
  </Router>
</BrowserRouter>
`;

exports[`SystemChecksACPV component render correctly when FAILED 1`] = `
<BrowserRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemChecksACPV>
        <main
          className="page-height system-checks pl-10 pr-10"
        >
          <FeatureFeedbackModal
            featureFlagName="ct-checks"
            open={false}
            placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
            title="CT_CHECKS_FEEDBACK_TITLE"
          >
            <SwipeableSheet
              onChange={[Function]}
              open={false}
              style={
                Object {
                  "zIndex": "9999",
                }
              }
            >
              <SwipeableBottomSheet
                defaultOpen={false}
                fullScreen={false}
                marginTop={0}
                onChange={[Function]}
                open={false}
                overflowHeight={0}
                overlay={true}
                scrollTopAtClose={true}
                shadowTip={true}
                style={
                  Object {
                    "zIndex": "9999",
                  }
                }
                swipeableViewsProps={
                  Object {
                    "className": "swipeable",
                  }
                }
                topShadow={true}
              >
                <div
                  style={
                    Object {
                      "bottom": 0,
                      "height": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "zIndex": "9999",
                    }
                  }
                >
                  <HeightUpdater
                    height={768}
                    onHeightChange={[Function]}
                  />
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "backgroundColor": "black",
                        "height": 768,
                        "left": 0,
                        "opacity": 0,
                        "pointerEvents": "none",
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                        "transition": "opacity 450ms",
                      }
                    }
                  />
                  <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="y"
                    className="swipeable"
                    containerStyle={
                      Object {
                        "boxSizing": "border-box",
                      }
                    }
                    disableLazyLoading={false}
                    disabled={false}
                    enableMouseEvents={true}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    onTransitionEnd={[Function]}
                    resistance={false}
                    slideStyle={
                      Object {
                        "boxSizing": "border-box",
                        "marginBottom": -0,
                        "overflow": "visible",
                      }
                    }
                    springConfig={
                      Object {
                        "delay": "0s",
                        "duration": "0.35s",
                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                      }
                    }
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                    threshold={5}
                  >
                    <div
                      className="swipeable"
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onMouseUp={[Function]}
                      onScroll={[Function]}
                      onTouchEnd={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "boxSizing": "border-box",
                          "overflowY": "initial",
                        }
                      }
                    >
                      <div
                        className="react-swipeable-view-container"
                        style={
                          Object {
                            "WebkitFlexDirection": "column",
                            "WebkitTransition": "all 0s ease 0s",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": null,
                            "transition": "all 0s ease 0s",
                            "willChange": "transform",
                          }
                        }
                      >
                        <div
                          aria-hidden={false}
                          data-swipeable="true"
                          key=".0"
                          style={
                            Object {
                              "WebkitFlexShrink": 0,
                              "boxSizing": "border-box",
                              "flexShrink": 0,
                              "marginBottom": -0,
                              "overflow": "visible",
                              "width": "100%",
                            }
                          }
                        >
                          <div
                            className="ReactSwipeableBottomSheet--closed"
                            style={
                              Object {
                                "backgroundColor": "white",
                                "height": "initial",
                                "maxHeight": 768,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <div
                              className="feedback-modal has-text-centered mt-10 mb-20"
                            >
                              <form
                                className="mt-20 pt-20"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="has-text-centered has-text-white has-text-weight-bold mb-5"
                                >
                                  CT_CHECKS_FEEDBACK_TITLE
                                </div>
                                <Rating
                                  onClick={[Function]}
                                  rating={1}
                                >
                                  <div
                                    className="column raitings"
                                  >
                                    <ForwardRef(SvgStar)
                                      className="active"
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className="active"
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                  </div>
                                </Rating>
                                <TextArea
                                  input={
                                    Object {
                                      "name": "comment",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": "",
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                  placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                >
                                  <div
                                    className="field"
                                  >
                                    <p
                                      className="control"
                                    >
                                      <textarea
                                        autoComplete="off"
                                        className="input textarea"
                                        disabled={false}
                                        name="comment"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                        value=""
                                      />
                                    </p>
                                  </div>
                                </TextArea>
                                <div
                                  className="is-flex file level space-around pt-0 mt-20"
                                >
                                  <button
                                    className="button is-uppercase is-primary"
                                    type="submit"
                                  >
                                    SUBMIT
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </ReactSwipableView>
                </div>
              </SwipeableBottomSheet>
            </SwipeableSheet>
          </FeatureFeedbackModal>
          <header
            className="is-clearfix has-text"
          >
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-left is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-chevron-left has-text-primary is-size-5 mr-5 mt-5"
              />
              SYSTEM_CHECKS
            </button>
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-right is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-update left has-text-primary is-size-5 mr-5 mt-5"
              />
              RUN_AGAIN
            </button>
          </header>
          <section
            className="mt-20"
          >
            <StatusBox
              indicator={
                <span
                  className="sp-hey has-text-primary is-size-2"
                />
              }
              text="Failed"
              title="PRODUCTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    PRODUCTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Failed
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  <span
                    className="sp-hey has-text-primary is-size-2"
                  />
                </article>
              </section>
            </StatusBox>
            <StatusBox
              indicator="100%"
              text="Succeeded"
              title="CONSUMPTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    CONSUMPTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Succeeded
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  100%
                </article>
              </section>
            </StatusBox>
            <StatusBox
              indicator={
                <span
                  className="sp-hey has-text-primary is-size-2"
                />
              }
              text={
                <span
                  className="has-text-primary"
                >
                  ERROR_FOUND
                </span>
              }
              title="GENERAL_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    GENERAL_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    <span
                      className="has-text-primary"
                    >
                      ERROR_FOUND
                    </span>
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  <span
                    className="sp-hey has-text-primary is-size-2"
                  />
                </article>
              </section>
            </StatusBox>
            <p
              className="has-text-primary is-size-6 has-text-centered"
            >
              1 SYSTEM_CHECKS_ERRORS
            </p>
          </section>
          <section
            className="mt-10"
          >
            <section
              className="is-flex is-vertical"
            >
              <button
                className="button is-primary is-outlined is-uppercase mt-20 is-fullwidth mr-5 is-fullwidth"
                onClick={[Function]}
              >
                BACK_TO_SETTINGS
              </button>
              <button
                className="button is-primary is-uppercase mt-20 is-fullwidth ml-5 is-fullwidth"
                onClick={[Function]}
              >
                VIEW_ERRORS
              </button>
            </section>
            <button
              className="button is-primary is-outlined is-uppercase mt-20 is-fullwidth mr-5"
              onClick={[Function]}
            >
              GO_TO_LIVE_DATA
            </button>
          </section>
        </main>
      </SystemChecksACPV>
    </Provider>
  </Router>
</BrowserRouter>
`;

exports[`SystemChecksACPV component render correctly when RUNNING 1`] = `
<BrowserRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemChecksACPV>
        <main
          className="page-height system-checks pl-10 pr-10"
        >
          <FeatureFeedbackModal
            featureFlagName="ct-checks"
            open={false}
            placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
            title="CT_CHECKS_FEEDBACK_TITLE"
          >
            <SwipeableSheet
              onChange={[Function]}
              open={false}
              style={
                Object {
                  "zIndex": "9999",
                }
              }
            >
              <SwipeableBottomSheet
                defaultOpen={false}
                fullScreen={false}
                marginTop={0}
                onChange={[Function]}
                open={false}
                overflowHeight={0}
                overlay={true}
                scrollTopAtClose={true}
                shadowTip={true}
                style={
                  Object {
                    "zIndex": "9999",
                  }
                }
                swipeableViewsProps={
                  Object {
                    "className": "swipeable",
                  }
                }
                topShadow={true}
              >
                <div
                  style={
                    Object {
                      "bottom": 0,
                      "height": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "zIndex": "9999",
                    }
                  }
                >
                  <HeightUpdater
                    height={768}
                    onHeightChange={[Function]}
                  />
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "backgroundColor": "black",
                        "height": 768,
                        "left": 0,
                        "opacity": 0,
                        "pointerEvents": "none",
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                        "transition": "opacity 450ms",
                      }
                    }
                  />
                  <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="y"
                    className="swipeable"
                    containerStyle={
                      Object {
                        "boxSizing": "border-box",
                      }
                    }
                    disableLazyLoading={false}
                    disabled={false}
                    enableMouseEvents={true}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    onTransitionEnd={[Function]}
                    resistance={false}
                    slideStyle={
                      Object {
                        "boxSizing": "border-box",
                        "marginBottom": -0,
                        "overflow": "visible",
                      }
                    }
                    springConfig={
                      Object {
                        "delay": "0s",
                        "duration": "0.35s",
                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                      }
                    }
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                    threshold={5}
                  >
                    <div
                      className="swipeable"
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onMouseUp={[Function]}
                      onScroll={[Function]}
                      onTouchEnd={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "boxSizing": "border-box",
                          "overflowY": "initial",
                        }
                      }
                    >
                      <div
                        className="react-swipeable-view-container"
                        style={
                          Object {
                            "WebkitFlexDirection": "column",
                            "WebkitTransition": "all 0s ease 0s",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": null,
                            "transition": "all 0s ease 0s",
                            "willChange": "transform",
                          }
                        }
                      >
                        <div
                          aria-hidden={false}
                          data-swipeable="true"
                          key=".0"
                          style={
                            Object {
                              "WebkitFlexShrink": 0,
                              "boxSizing": "border-box",
                              "flexShrink": 0,
                              "marginBottom": -0,
                              "overflow": "visible",
                              "width": "100%",
                            }
                          }
                        >
                          <div
                            className="ReactSwipeableBottomSheet--closed"
                            style={
                              Object {
                                "backgroundColor": "white",
                                "height": "initial",
                                "maxHeight": 768,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <div
                              className="feedback-modal has-text-centered mt-10 mb-20"
                            >
                              <form
                                className="mt-20 pt-20"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="has-text-centered has-text-white has-text-weight-bold mb-5"
                                >
                                  CT_CHECKS_FEEDBACK_TITLE
                                </div>
                                <Rating
                                  onClick={[Function]}
                                  rating={1}
                                >
                                  <div
                                    className="column raitings"
                                  >
                                    <ForwardRef(SvgStar)
                                      className="active"
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className="active"
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                  </div>
                                </Rating>
                                <TextArea
                                  input={
                                    Object {
                                      "name": "comment",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": "",
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                  placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                >
                                  <div
                                    className="field"
                                  >
                                    <p
                                      className="control"
                                    >
                                      <textarea
                                        autoComplete="off"
                                        className="input textarea"
                                        disabled={false}
                                        name="comment"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                        value=""
                                      />
                                    </p>
                                  </div>
                                </TextArea>
                                <div
                                  className="is-flex file level space-around pt-0 mt-20"
                                >
                                  <button
                                    className="button is-uppercase is-primary"
                                    type="submit"
                                  >
                                    SUBMIT
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </ReactSwipableView>
                </div>
              </SwipeableBottomSheet>
            </SwipeableSheet>
          </FeatureFeedbackModal>
          <header
            className="is-clearfix has-text"
          >
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-left is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-chevron-left has-text-primary is-size-5 mr-5 mt-5"
              />
              SYSTEM_CHECKS
            </button>
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-right is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-update left has-text-primary is-size-5 mr-5 mt-5"
              />
              RUN_AGAIN
            </button>
          </header>
          <section
            className="mt-20"
          >
            <StatusBox
              indicator="10%"
              text="Running"
              title="PRODUCTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    PRODUCTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Running
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  10%
                </article>
              </section>
            </StatusBox>
            <StatusBox
              indicator="0%"
              text="Running"
              title="CONSUMPTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    CONSUMPTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Running
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  0%
                </article>
              </section>
            </StatusBox>
          </section>
        </main>
      </SystemChecksACPV>
    </Provider>
  </Router>
</BrowserRouter>
`;

exports[`SystemChecksACPV component render correctly when SUCCEEDED 1`] = `
<BrowserRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemChecksACPV>
        <main
          className="page-height system-checks pl-10 pr-10"
        >
          <FeatureFeedbackModal
            featureFlagName="ct-checks"
            open={true}
            placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
            title="CT_CHECKS_FEEDBACK_TITLE"
          >
            <SwipeableSheet
              onChange={[Function]}
              open={false}
              style={
                Object {
                  "zIndex": "9999",
                }
              }
            >
              <SwipeableBottomSheet
                defaultOpen={false}
                fullScreen={false}
                marginTop={0}
                onChange={[Function]}
                open={false}
                overflowHeight={0}
                overlay={true}
                scrollTopAtClose={true}
                shadowTip={true}
                style={
                  Object {
                    "zIndex": "9999",
                  }
                }
                swipeableViewsProps={
                  Object {
                    "className": "swipeable",
                  }
                }
                topShadow={true}
              >
                <div
                  style={
                    Object {
                      "bottom": 0,
                      "height": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "zIndex": "9999",
                    }
                  }
                >
                  <HeightUpdater
                    height={768}
                    onHeightChange={[Function]}
                  />
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "backgroundColor": "black",
                        "height": 768,
                        "left": 0,
                        "opacity": 0,
                        "pointerEvents": "none",
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                        "transition": "opacity 450ms",
                      }
                    }
                  />
                  <ReactSwipableView
                    animateHeight={false}
                    animateTransitions={true}
                    axis="y"
                    className="swipeable"
                    containerStyle={
                      Object {
                        "boxSizing": "border-box",
                      }
                    }
                    disableLazyLoading={false}
                    disabled={false}
                    enableMouseEvents={true}
                    hysteresis={0.6}
                    ignoreNativeScroll={false}
                    index={0}
                    onChangeIndex={[Function]}
                    onTransitionEnd={[Function]}
                    resistance={false}
                    slideStyle={
                      Object {
                        "boxSizing": "border-box",
                        "marginBottom": -0,
                        "overflow": "visible",
                      }
                    }
                    springConfig={
                      Object {
                        "delay": "0s",
                        "duration": "0.35s",
                        "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                      }
                    }
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                    threshold={5}
                  >
                    <div
                      className="swipeable"
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onMouseUp={[Function]}
                      onScroll={[Function]}
                      onTouchEnd={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "boxSizing": "border-box",
                          "overflowY": "initial",
                        }
                      }
                    >
                      <div
                        className="react-swipeable-view-container"
                        style={
                          Object {
                            "WebkitFlexDirection": "column",
                            "WebkitTransition": "all 0s ease 0s",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": null,
                            "transition": "all 0s ease 0s",
                            "willChange": "transform",
                          }
                        }
                      >
                        <div
                          aria-hidden={false}
                          data-swipeable="true"
                          key=".0"
                          style={
                            Object {
                              "WebkitFlexShrink": 0,
                              "boxSizing": "border-box",
                              "flexShrink": 0,
                              "marginBottom": -0,
                              "overflow": "visible",
                              "width": "100%",
                            }
                          }
                        >
                          <div
                            className="ReactSwipeableBottomSheet--closed"
                            style={
                              Object {
                                "backgroundColor": "white",
                                "height": "initial",
                                "maxHeight": 768,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <div
                              className="feedback-modal has-text-centered mt-10 mb-20"
                            >
                              <form
                                className="mt-20 pt-20"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="has-text-centered has-text-white has-text-weight-bold mb-5"
                                >
                                  CT_CHECKS_FEEDBACK_TITLE
                                </div>
                                <Rating
                                  onClick={[Function]}
                                  rating={1}
                                >
                                  <div
                                    className="column raitings"
                                  >
                                    <ForwardRef(SvgStar)
                                      className="active"
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className="active"
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                    <ForwardRef(SvgStar)
                                      className=""
                                      onClick={[Function]}
                                    >
                                      <svg
                                        className=""
                                        onClick={[Function]}
                                      >
                                        Star.svg
                                      </svg>
                                    </ForwardRef(SvgStar)>
                                  </div>
                                </Rating>
                                <TextArea
                                  input={
                                    Object {
                                      "name": "comment",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "data": Object {},
                                      "dirty": false,
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "initial": "",
                                      "invalid": false,
                                      "length": undefined,
                                      "modified": false,
                                      "pristine": true,
                                      "submitError": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": true,
                                      "validating": false,
                                      "visited": false,
                                    }
                                  }
                                  placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                >
                                  <div
                                    className="field"
                                  >
                                    <p
                                      className="control"
                                    >
                                      <textarea
                                        autoComplete="off"
                                        className="input textarea"
                                        disabled={false}
                                        name="comment"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder="CT_CHECKS_FEEDBACK_PLACEHOLDER"
                                        value=""
                                      />
                                    </p>
                                  </div>
                                </TextArea>
                                <div
                                  className="is-flex file level space-around pt-0 mt-20"
                                >
                                  <button
                                    className="button is-uppercase is-primary"
                                    type="submit"
                                  >
                                    SUBMIT
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </ReactSwipableView>
                </div>
              </SwipeableBottomSheet>
            </SwipeableSheet>
          </FeatureFeedbackModal>
          <header
            className="is-clearfix has-text"
          >
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-left is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-chevron-left has-text-primary is-size-5 mr-5 mt-5"
              />
              SYSTEM_CHECKS
            </button>
            <button
              className="button is-text is-paddingless is-borderless has-text-grey has-text-weight-bold is-pulled-right is-size-6"
              disabled={false}
              onClick={[Function]}
            >
              <i
                className="sp-update left has-text-primary is-size-5 mr-5 mt-5"
              />
              RUN_AGAIN
            </button>
          </header>
          <section
            className="mt-20"
          >
            <StatusBox
              indicator="100%"
              text="Succeeded"
              title="PRODUCTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    PRODUCTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Succeeded
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  100%
                </article>
              </section>
            </StatusBox>
            <StatusBox
              indicator="100%"
              text="Succeeded"
              title="CONSUMPTION_CTE"
            >
              <section
                className="boxwrap mb-10 mt-10 pl-20 pr-20 pt-20 pb-20"
              >
                <article
                  className="left"
                >
                  <p
                    className="has-text-white has-text-weight-bold"
                  >
                    CONSUMPTION_CTE
                  </p>
                  <p
                    className="mt-10"
                  >
                    Succeeded
                  </p>
                </article>
                <article
                  className="is-flex file level is-right is-size-2 has-text-white has-text-weight-bold"
                >
                  100%
                </article>
              </section>
            </StatusBox>
          </section>
          <section
            className="mt-10"
          >
            <section
              className="is-flex"
            >
              <button
                className="button is-primary is-outlined is-uppercase mt-20 is-fullwidth mr-5"
                onClick={[Function]}
              >
                GO_TO_LIVE_DATA
              </button>
              <button
                className="button is-primary is-uppercase mt-20 is-fullwidth ml-5 is-fullwidth"
                onClick={[Function]}
              >
                COMMISSION
              </button>
            </section>
          </section>
        </main>
      </SystemChecksACPV>
    </Provider>
  </Router>
</BrowserRouter>
`;
