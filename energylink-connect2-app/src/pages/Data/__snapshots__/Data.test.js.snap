// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Data page render correctly 1`] = `
<BrowserRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <_default>
        <section
          className="data is-flex has-text-centered full-height pl-10 pr-10"
        >
          <section />
          <section>
            <div
              className="live-power-title pt-20 pb-20"
            >
              <div />
              <h6
                className="title-text is-uppercase"
              >
                LIVE_DATA
              </h6>
              <div
                className="info"
                onClick={[Function]}
              >
                <span
                  className="sp-info has-text-primary"
                />
              </div>
            </div>
            <div
              className="no-meters-warning has-text-weight-bold has-text-centered is-flex pt-20 pb-20"
            >
              <span
                className="has-text-white is-size-5"
              >
                LIVE_DATA_UNAVAILABLE
              </span>
              <span>
                NO_METER_CONFIG
              </span>
            </div>
          </section>
          <div
            className="separator"
          />
          <EnergyGraphSection>
            <div
              className="energy-graph-container columns is-mobile is-multiline is-variable is-1"
              id="energy-graph"
            >
              <div
                className="column is-full ignore-in-share pb-0"
              >
                <EnergySwitch
                  entries={
                    Array [
                      Object {
                        "id": "power",
                        "value": "POWER (kW)",
                      },
                      Object {
                        "id": "energy",
                        "selected": true,
                        "value": "ENERGY (kWh)",
                      },
                    ]
                  }
                  onChange={[Function]}
                >
                  <div
                    className="energy-switch is-flex"
                  >
                    <div
                      className="selected-label selected-1"
                    />
                    <div
                      className="entries is-flex pt-8 pb-8"
                    >
                      <div
                        className="power"
                        key="POWER (kW)"
                        onClick={[Function]}
                      >
                        POWER (kW)
                      </div>
                      <div
                        className="energy selected"
                        key="ENERGY (kWh)"
                        onClick={[Function]}
                      >
                        ENERGY (kWh)
                      </div>
                    </div>
                  </div>
                </EnergySwitch>
              </div>
              <div
                className="column energy-graph-column is-full pt-0"
              >
                <SelectedGraph
                  data={Object {}}
                  dataSource="LIVE"
                  selectedId="energy"
                >
                  <EnergyGraph
                    animation={false}
                    className="mt-55"
                    data={Object {}}
                    hasStorage={false}
                    view="live"
                    weather={true}
                  >
                    <div
                      className="energy-graph-container"
                    >
                      <ResponsiveContainer
                        className="energy-graph mt-55"
                        debounce={0}
                        height={380}
                        width="100%"
                      >
                        <div
                          className="recharts-responsive-container energy-graph mt-55"
                          style={
                            Object {
                              "height": 380,
                              "maxHeight": undefined,
                              "minHeight": undefined,
                              "minWidth": undefined,
                              "width": "100%",
                            }
                          }
                        >
                          <ComposedChart
                            barCategoryGap="10%"
                            barGap={4}
                            data={Array []}
                            height={380}
                            layout="horizontal"
                            margin={
                              Object {
                                "left": 5,
                                "right": 10,
                              }
                            }
                            reverseStackOrder={false}
                            stackOffset="none"
                            width={0}
                          />
                          <ResizeDetector
                            handleHeight={true}
                            handleWidth={true}
                            onResize={[Function]}
                            refreshRate={1000}
                            resizableElementId=""
                            skipOnMount={false}
                          >
                            <div
                              style={
                                Object {
                                  "display": "none",
                                  "height": 0,
                                  "position": "absolute",
                                  "visibility": "hidden",
                                  "width": 0,
                                }
                              }
                            />
                          </ResizeDetector>
                        </div>
                      </ResponsiveContainer>
                    </div>
                  </EnergyGraph>
                </SelectedGraph>
              </div>
            </div>
          </EnergyGraphSection>
          <SwipeableSheet
            onChange={[Function]}
            open={false}
          >
            <SwipeableBottomSheet
              defaultOpen={false}
              fullScreen={false}
              marginTop={0}
              onChange={[Function]}
              open={false}
              overflowHeight={0}
              overlay={true}
              scrollTopAtClose={true}
              shadowTip={true}
              swipeableViewsProps={
                Object {
                  "className": "swipeable",
                }
              }
              topShadow={true}
            >
              <div
                style={
                  Object {
                    "bottom": 0,
                    "height": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                  }
                }
              >
                <HeightUpdater
                  height={768}
                  onHeightChange={[Function]}
                />
                <div
                  onClick={[Function]}
                  style={
                    Object {
                      "backgroundColor": "black",
                      "height": 768,
                      "left": 0,
                      "opacity": 0,
                      "pointerEvents": "none",
                      "position": "fixed",
                      "right": 0,
                      "top": 0,
                      "transition": "opacity 450ms",
                    }
                  }
                />
                <ReactSwipableView
                  animateHeight={false}
                  animateTransitions={true}
                  axis="y"
                  className="swipeable"
                  containerStyle={
                    Object {
                      "boxSizing": "border-box",
                    }
                  }
                  disableLazyLoading={false}
                  disabled={false}
                  enableMouseEvents={true}
                  hysteresis={0.6}
                  ignoreNativeScroll={false}
                  index={0}
                  onChangeIndex={[Function]}
                  onTransitionEnd={[Function]}
                  resistance={false}
                  slideStyle={
                    Object {
                      "boxSizing": "border-box",
                      "marginBottom": -0,
                      "overflow": "visible",
                    }
                  }
                  springConfig={
                    Object {
                      "delay": "0s",
                      "duration": "0.35s",
                      "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                    }
                  }
                  style={
                    Object {
                      "boxSizing": "border-box",
                      "overflowY": "initial",
                    }
                  }
                  threshold={5}
                >
                  <div
                    className="swipeable"
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseMove={[Function]}
                    onMouseUp={[Function]}
                    onScroll={[Function]}
                    onTouchEnd={[Function]}
                    onTouchStart={[Function]}
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                  >
                    <div
                      className="react-swipeable-view-container"
                      style={
                        Object {
                          "WebkitFlexDirection": "column",
                          "WebkitTransition": "all 0s ease 0s",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "display": "flex",
                          "flexDirection": "column",
                          "height": null,
                          "transition": "all 0s ease 0s",
                          "willChange": "transform",
                        }
                      }
                    >
                      <div
                        aria-hidden={false}
                        data-swipeable="true"
                        key=".0"
                        style={
                          Object {
                            "WebkitFlexShrink": 0,
                            "boxSizing": "border-box",
                            "flexShrink": 0,
                            "marginBottom": -0,
                            "overflow": "visible",
                            "width": "100%",
                          }
                        }
                      >
                        <div
                          className="ReactSwipeableBottomSheet--closed"
                          style={
                            Object {
                              "backgroundColor": "white",
                              "height": "initial",
                              "maxHeight": 768,
                              "overflow": "hidden",
                            }
                          }
                        >
                          <div
                            className="live-power-info is-flex has-text-white"
                          >
                            <span
                              className="sp-info is-size-1"
                            />
                            <span
                              className="mt-10 mb-10 has-text-justified"
                            >
                              LIVE_POWER_INFO
                            </span>
                            <div
                              className="mt-10 mb-20"
                            >
                              <button
                                className="button is-primary"
                                onClick={[Function]}
                              >
                                CLOSE
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </ReactSwipableView>
              </div>
            </SwipeableBottomSheet>
          </SwipeableSheet>
        </section>
      </_default>
    </Provider>
  </Router>
</BrowserRouter>
`;
