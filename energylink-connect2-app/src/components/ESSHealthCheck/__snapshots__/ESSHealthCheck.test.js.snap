// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ESSHealthCheck component initial state render correctly 1`] = `
Object {
  "component": <BrowserRouter
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Provider
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <ESSHealthCheck
          results={
            Object {
              "errors": Array [],
            }
          }
        >
          <div
            className="ess-hc has-text-centered pt-10 pl-10 pr-10"
          >
            <span
              className="is-uppercase has-text-weight-bold"
            >
              HEALTH_CHECK
            </span>
            <div
              className="status-message"
            />
            <SwipeableBottomSheet
              defaultOpen={false}
              fullScreen={false}
              marginTop={0}
              onChange={[Function]}
              overflowHeight={0}
              overlay={true}
              scrollTopAtClose={true}
              shadowTip={false}
              swipeableViewsProps={Object {}}
              topShadow={true}
            >
              <div
                style={
                  Object {
                    "bottom": 0,
                    "height": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                  }
                }
              >
                <HeightUpdater
                  height={768}
                  onHeightChange={[Function]}
                />
                <div
                  onClick={[Function]}
                  style={
                    Object {
                      "backgroundColor": "black",
                      "height": 768,
                      "left": 0,
                      "opacity": 0,
                      "pointerEvents": "none",
                      "position": "fixed",
                      "right": 0,
                      "top": 0,
                      "transition": "opacity 450ms",
                    }
                  }
                />
                <ReactSwipableView
                  animateHeight={false}
                  animateTransitions={true}
                  axis="y"
                  containerStyle={
                    Object {
                      "boxSizing": "border-box",
                    }
                  }
                  disableLazyLoading={false}
                  disabled={false}
                  enableMouseEvents={true}
                  hysteresis={0.6}
                  ignoreNativeScroll={false}
                  index={0}
                  onChangeIndex={[Function]}
                  onTransitionEnd={[Function]}
                  resistance={false}
                  slideStyle={
                    Object {
                      "boxSizing": "border-box",
                      "marginBottom": -0,
                      "overflow": "visible",
                    }
                  }
                  springConfig={
                    Object {
                      "delay": "0s",
                      "duration": "0.35s",
                      "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
                    }
                  }
                  style={
                    Object {
                      "boxSizing": "border-box",
                      "overflowY": "initial",
                    }
                  }
                  threshold={5}
                >
                  <div
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseMove={[Function]}
                    onMouseUp={[Function]}
                    onScroll={[Function]}
                    onTouchEnd={[Function]}
                    onTouchStart={[Function]}
                    style={
                      Object {
                        "boxSizing": "border-box",
                        "overflowY": "initial",
                      }
                    }
                  >
                    <div
                      className="react-swipeable-view-container"
                      style={
                        Object {
                          "WebkitFlexDirection": "column",
                          "WebkitTransition": "all 0s ease 0s",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "display": "flex",
                          "flexDirection": "column",
                          "height": null,
                          "transition": "all 0s ease 0s",
                          "willChange": "transform",
                        }
                      }
                    >
                      <div
                        aria-hidden={false}
                        data-swipeable="true"
                        key=".0"
                        style={
                          Object {
                            "WebkitFlexShrink": 0,
                            "boxSizing": "border-box",
                            "flexShrink": 0,
                            "marginBottom": -0,
                            "overflow": "visible",
                            "width": "100%",
                          }
                        }
                      >
                        <div
                          className="ReactSwipeableBottomSheet--closed"
                          style={
                            Object {
                              "backgroundColor": "white",
                              "height": "initial",
                              "maxHeight": 768,
                              "overflow": "hidden",
                            }
                          }
                        >
                          <div
                            className="check-in-progress is-flex"
                          >
                            <span
                              className="has-text-weight-bold"
                            >
                              HOLD_ON
                            </span>
                            <span
                              className="mt-10 mb-10"
                            >
                              WAIT_FOR_CHECK
                            </span>
                            <div
                              className="mt-10 mb-20"
                            >
                              <button
                                className="button is-primary"
                                onClick={[Function]}
                              >
                                CLOSE
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </ReactSwipableView>
              </div>
            </SwipeableBottomSheet>
            <ContinueFooter
              text="HEALTH_CHECK_SUCCESSFUL"
            >
              <div
                className="continue-footer"
              >
                <span
                  className="is-size-6 has-text-white has-text-weight-bold"
                >
                  NO_ERRORS_DETECTED
                </span>
                <span
                  className="is-size-6"
                >
                  HEALTH_CHECK_SUCCESSFUL
                </span>
                <Link
                  className="button is-primary is-uppercase mt-20"
                  to=""
                >
                  <LinkAnchor
                    className="button is-primary is-uppercase mt-20"
                    href="/"
                    navigate={[Function]}
                  >
                    <a
                      className="button is-primary is-uppercase mt-20"
                      href="/"
                      onClick={[Function]}
                    >
                      CONTINUE
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
            </ContinueFooter>
          </div>
        </ESSHealthCheck>
      </Provider>
    </Router>
  </BrowserRouter>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;
